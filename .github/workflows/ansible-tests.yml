---
name: ansible-tests
on:
  push:

jobs:
  ansible-test-python3:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        os: [debian, rocky8, suse]
        ansible_version: ["2_10", "4_10"]
        agent_version: ["6", "7"]
    container:
      image: datadog/docker-library:ansible_${{ matrix.os }}_${{ matrix.ansible_version }}
    steps:
      - uses: actions/checkout@v1
      - name: Build the Ansible collection
        run: ansible-galaxy collection build
      - name: Install the Ansible collection
        run: ansible-galaxy collection install datadog-dd-*.tar.gz
      - name: Run ansible playbook with the collection
        run: ansible-playbook -i ./ci_test/inventory/inventory.ini "./ci_test/install_agent_${{ matrix.agent_version }}.yaml" -e 'ansible_python_interpreter=/usr/bin/python3'
      - name: Check datadog-agent version
        run: datadog-agent version

  ansible-tests-windows:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        agent_version: ["6", "7"]
        ansible_version: ["2.10", "4.10"]
    steps:
      - name: Run AnsibleRemotingConfig
        run: |
          Enable-PSRemoting
          Set-Item -Path WSMan:\localhost\Service\Auth\Basic -Value $true
          Set-Item -Path WSMan:\localhost\Service\AllowUnencrypted -Value $true
      - uses: actions/checkout@v1
      - uses: Vampire/setup-wsl@v2
        with:
          distribution: Ubuntu-22.04
      - name: Generate random password and set it in env vars
        shell: wsl-bash {0}
        run: |
          export PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)!
          echo -n $PASSWORD > .passwd
      - name: Update runneradmin password
        run: |
          $password = Get-Content .\.passwd -Raw
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          Get-LocalUser -Name "runneradmin" | Set-LocalUser -Password $securePassword
      - name: Install pip
        shell: wsl-bash {0}
        run: sudo apt update -y && sudo apt install -y python3-pip
      - name: Install Ansible
        shell: wsl-bash {0}
        run: python3 -m pip install ansible==${{ matrix.ansible_version}}.* pywinrm
      - name: Build the Ansible collection
        shell: wsl-bash {0}
        run: ansible-galaxy collection build && ansible-galaxy collection install ansible.windows:1.11.0
      - name: Install the Ansible collection
        shell: wsl-bash {0}
        run: ansible-galaxy collection install datadog-dd-*.tar.gz
      - name: Run ansible playbook
        shell: wsl-bash {0}
        run: |
          PASSWORD=$(cat .passwd)
          ansible-playbook -i ./ci_test/inventory/inventory_win.ini "./ci_test/install_agent_${{ matrix.agent_version }}.yaml" -e "ansible_password=$PASSWORD" -vvv
      - name: Check agent is installed
        run: |
          & "$env:ProgramFiles\Datadog\Datadog Agent\bin\agent.exe" version

  ansible-tests-macos:
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        agent_version: ["6", "7"]
        ansible_version: ["2.10", "4.10"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      - name: Install Ansible
        run: pip3 install ansible==${{ matrix.ansible_version}}.*
      - name: Build the Ansible collection
        run: ansible-galaxy collection build
      - name: Install the Ansible collection
        run: ansible-galaxy collection install datadog-dd-*.tar.gz
      - name: Run ansible playbook with the collection
        run: ansible-playbook -i ./ci_test/inventory/inventory_macos.ini "./ci_test/install_agent_${{ matrix.agent_version }}_macos.yaml"
      - name: Check datadog-agent version exit 0
        run: datadog-agent version
