- name: Set DD Username Arg
  when: datadog_windows_ddagentuser_name | default('', true) | length > 0
  ansible.builtin.set_fact:
    win_install_args: '{{ win_install_args }} DDAGENTUSER_NAME={{ datadog_windows_ddagentuser_name
      }}'
- name: Check existing config file Directory
  register: config_root_from_registry
  ansible.windows.win_reg_stat:
    path: HKLM:\SOFTWARE\Datadog\Datadog Agent
    name: ConfigRoot
- name: Check existing installPath Directory
  register: install_path_from_registry
  ansible.windows.win_reg_stat:
    path: HKLM:\SOFTWARE\Datadog\Datadog Agent
    name: InstallPath
- name: Validate config path
  when: ( (config_root_from_registry.exists) and (datadog_windows_config_files_dir
    | length > 0 ) and (config_root_from_registry.value | regex_replace('\\\\$','')
    | lower != datadog_windows_config_files_dir | lower ) )
  ansible.builtin.fail:
    msg: Incompatible configuration option {{ config_root_from_registry.value }} !=
      {{ datadog_windows_config_files_dir }}
- name: Validated config path
  when: ( (config_root_from_registry.exists) and (datadog_windows_config_files_dir
    | length > 0 ) and (config_root_from_registry.value | regex_replace('\\\\$','')
    | lower == datadog_windows_config_files_dir | lower ) )
  ansible.builtin.debug:
    msg: Allowing configuration option {{ config_root_from_registry.value }} == {{
      datadog_windows_config_files_dir }}
- name: Validate install path
  when: ( (install_path_from_registry.exists) and (datadog_windows_program_files_dir
    | length > 0 ) and (install_path_from_registry.value | regex_replace('\\\\$','')
    | lower != datadog_windows_program_files_dir | lower ) )
  ansible.builtin.fail:
    msg: Incompatible configuration option {{ install_path_from_registry.value }}
      != {{ datadog_windows_program_files_dir }}
- name: Validated install path
  when: ( (install_path_from_registry.exists) and (datadog_windows_program_files_dir
    | length > 0 ) and (install_path_from_registry.value | regex_replace('\\\\$','')
    | lower == datadog_windows_program_files_dir | lower ) )
  ansible.builtin.debug:
    msg: Allowing configuration option {{ install_path_from_registry.value }} == {{
      datadog_windows_program_files_dir }}
- name: Set Program Files Target Directory
  when: datadog_windows_program_files_dir | length > 0
  ansible.builtin.set_fact:
    win_install_args: '{{ win_install_args }} PROJECTLOCATION="{{ datadog_windows_program_files_dir
      }}" '
- name: Set Config Files Target Directory
  when: datadog_windows_config_files_dir | length > 0
  ansible.builtin.set_fact:
    win_install_args: '{{ win_install_args }} APPLICATIONDATADIRECTORY="{{ datadog_windows_config_files_dir
      }}" '
- name: Set config root for config Files
  when: ((datadog_windows_config_files_dir | length > 0) and (not config_root_from_registry.exists))
  ansible.builtin.set_fact:
    datadog_windows_config_root: '{{ datadog_windows_config_files_dir }}'
- name: Set config root for config files from current location
  when: config_root_from_registry.exists
  ansible.builtin.set_fact:
    datadog_windows_config_root: '{{ config_root_from_registry.value | regex_replace(''\\$'','''')
      }}'
- name: Set Test
  ansible.builtin.set_fact:
    win_install_args: '{{ win_install_args }}'
- name: Set Windows NPM flag
  when: datadog_sysprobe_enabled
  ansible.builtin.set_fact:
    win_install_args: '{{ win_install_args }} ADDLOCAL=MainApplication,NPM'
