- name: Set local variables for processed key {{ item.key }}
  ansible.builtin.set_fact:
    key_fingerprint: '{{ item.key }}'
    keyring_url: '{{ item.value }}'
- name: Find out whether key {{ key_fingerprint }} is already imported
  register: key_exists_result
  failed_when: false
  changed_when: key_exists_result.rc != 0
  when: key_fingerprint != datadog_apt_key_current_name
  ansible.builtin.shell: gpg --no-default-keyring --keyring {{ datadog_apt_usr_share_keyring
    }} --list-keys --with-fingerprint --with-colons | grep {{ key_fingerprint }}
- name: Set local helper variable for determining key import (when not {{ datadog_apt_key_current_name
    }})
  when: key_fingerprint != datadog_apt_key_current_name
  ansible.builtin.set_fact:
    key_needs_import: '{{ ''false'' if key_exists_result.rc == 0 else ''true'' }}'
- name: Set local helper variable for determining key import (when {{ datadog_apt_key_current_name
    }})
  when: key_fingerprint == datadog_apt_key_current_name
  ansible.builtin.set_fact:
    key_needs_import: 'true'
- name: Create temporary directory for key manipulation
  register: tempdir
  when: key_needs_import
  changed_when: false
  ansible.builtin.tempfile:
    state: directory
    suffix: keys
- name: Download {{ keyring_url }} to import key {{ key_fingerprint }}
  when: key_needs_import
  changed_when: false
  ansible.builtin.get_url:
    url: '{{ keyring_url }}'
    dest: '{{ tempdir.path }}/{{ key_fingerprint }}'
    force: true
- name: Ensure downloaded file for {{ key_fingerprint }} is a binary keyring
  when: key_needs_import
  changed_when: false
  ansible.builtin.shell: cat {{ tempdir.path }}/{{ key_fingerprint }} | gpg --dearmor
    > {{ tempdir.path }}/binary.gpg
- name: Extract the required key from the binary keyring (when not {{ datadog_apt_key_current_name
    }})
  when: key_fingerprint != datadog_apt_key_current_name and key_needs_import
  changed_when: false
  ansible.builtin.shell: gpg --no-default-keyring --keyring {{ tempdir.path }}/binary.gpg
    --export {{ key_fingerprint }} > {{ tempdir.path }}/single.gpg
- name: Extract the required key from the binary keyring (when {{ datadog_apt_key_current_name
    }})
  when: key_fingerprint == datadog_apt_key_current_name and key_needs_import
  changed_when: false
  ansible.builtin.copy:
    src: '{{ tempdir.path }}/binary.gpg'
    dest: '{{ tempdir.path }}/single.gpg'
    mode: '0600'
    remote_src: true
- name: Import key {{ key_fingerprint }} to {{ datadog_apt_usr_share_keyring }} keyring
  when: key_needs_import
  register: key_import_result
  changed_when: '"imported: 1" in key_import_result.stderr'
  ansible.builtin.shell: cat {{ tempdir.path }}/single.gpg | gpg --no-default-keyring
    --keyring {{ datadog_apt_usr_share_keyring }} --import --batch
- name: Remove temporary directory for key manipulation
  when: key_needs_import
  changed_when: false
  ansible.builtin.file:
    path: '{{ tempdir.path }}'
    state: absent
