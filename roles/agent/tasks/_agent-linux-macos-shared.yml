- name: Create Datadog agent config directory
  when: datadog_manage_config
  ansible.builtin.file:
    dest: '{{ _dd_config_dir }}'
    state: directory
    mode: 493
    owner: '{{ _dd_user }}'
    group: '{{ _dd_group }}'
- name: Create main Datadog agent configuration file
  when: datadog_manage_config
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.template:
    src: datadog.yaml.j2
    dest: '{{ _dd_config_dir }}/datadog.yaml'
    mode: 416
    owner: '{{ _dd_user }}'
    group: '{{ _dd_group }}'
- name: Register all checks directories present in datadog
  register: datadog_conf_directories
  when: datadog_manage_config and (datadog_disable_untracked_checks or datadog_disable_default_checks)
  ansible.builtin.find:
    paths: '{{ _dd_config_dir }}/conf.d/'
    patterns:
    - '*.d'
    file_type: directory
- name: Delete checks not present in datadog_tracked_checks
  loop: '{{ datadog_conf_directories.files | map(attribute=''path'') | list | map(''basename'')
    | list | map(''regex_replace'', ''^(.*).d$'', ''\1'') | list }}'
  when: datadog_manage_config and datadog_disable_untracked_checks and item not in
    datadog_tracked_checks
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.file:
    path: '{{ _dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml'
    state: absent
- name: Delete all default checks
  loop: '{{ datadog_conf_directories.files | map(attribute=''path'') | list | map(''basename'')
    | list | map(''regex_replace'', ''^(.*).d$'', ''\1'') | list }}'
  when: datadog_manage_config and datadog_disable_default_checks and item not in datadog_tracked_checks
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.file:
    path: '{{ _dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml.default'
    state: absent
- name: Delete all example checks
  loop: '{{ datadog_conf_directories.files | map(attribute=''path'') | list | map(''basename'')
    | list | map(''regex_replace'', ''^(.*).d$'', ''\1'') | list }}'
  when: datadog_manage_config and datadog_disable_example_checks and item not in datadog_tracked_checks
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.file:
    path: '{{ _dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml.example'
    state: absent
- name: Ensure configuration directories are present for each Datadog check
  with_items: '{{ datadog_checks|list }}'
  when: datadog_manage_config
  ansible.builtin.file:
    dest: '{{ _dd_config_dir }}/conf.d/{{ item }}.d'
    state: directory
    owner: '{{ _dd_user }}'
    group: '{{ _dd_group }}'
    mode: 493
- name: Create a configuration file for each Datadog check
  with_items: '{{ datadog_checks|list }}'
  when: datadog_manage_config
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.template:
    src: checks.yaml.j2
    dest: '{{ _dd_config_dir }}/conf.d/{{ item }}.d/conf.yaml'
    mode: 416
    owner: '{{ _dd_user }}'
    group: '{{ _dd_group }}'
- name: Remove old configuration file for each Datadog check
  with_items: '{{ datadog_checks|list }}'
  when: datadog_manage_config
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.file:
    dest: '{{ _dd_config_dir }}/conf.d/{{ item }}.yaml'
    state: absent
- name: Create custom check file for each custom check
  with_items: '{{ datadog_custom_checks|list }}'
  notify: '{{ _dd_notify_agent }}'
  ansible.builtin.copy:
    src: '{{ datadog_custom_checks[item] }}'
    dest: '{{ _dd_config_dir }}/checks.d/{{ item }}.py'
    mode: 493
    owner: '{{ _dd_user }}'
    group: '{{ _dd_group }}'
- name: Create installation information file
  ansible.builtin.template:
    src: install_info.j2
    dest: '{{ _dd_config_dir }}/install_info'
    owner: '{{ _dd_user }}'
    group: '{{ _dd_group }}'
    mode: 420
