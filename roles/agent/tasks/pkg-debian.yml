- name: Install apt-transport-https
  when: not ansible_check_mode
  ansible.builtin.apt:
    update_cache: true
    name: apt-transport-https
    state: present
- name: Install gnupg
  when: not ansible_check_mode
  ansible.builtin.apt:
    update_cache: true
    name: gnupg
    state: present
- name: Check if {{ datadog_apt_usr_share_keyring }} exists with correct mode
  register: apt_keyring_file
  ansible.builtin.stat:
    path: '{{ datadog_apt_usr_share_keyring }}'
- name: Ensure {{ datadog_apt_usr_share_keyring }} exists
  when: not ansible_check_mode and (not apt_keyring_file.stat.exists or not apt_keyring_file.stat.mode
    == "0644")
  ansible.builtin.file:
    path: '{{ datadog_apt_usr_share_keyring }}'
    owner: root
    group: root
    mode: '0644'
    state: touch
- name: Install apt keys from default URLs
  with_items: '{{ datadog_apt_default_keys }}'
  when: datadog_apt_key_url_new is not defined and not ansible_check_mode
  ansible.builtin.include_tasks: _apt-key-import.yml
- name: Install apt keys from custom URL
  with_items:
  - key: A2923DFF56EDA6E76E55E492D3A80E30382E94DE
    value: '{{ datadog_apt_key_url_new }}'
  - key: D75CEA17048B9ACBF186794B32637D44F14F620E
    value: '{{ datadog_apt_key_url_new }}'
  when: datadog_apt_key_url_new is defined and not ansible_check_mode
  ansible.builtin.include_tasks: _apt-key-import.yml
- name: Ensure {{ datadog_apt_trusted_d_keyring }} exists with same contents as {{
    datadog_apt_usr_share_keyring }} for older distro versions
  when: ((ansible_distribution == 'Debian' and ansible_distribution_major_version|int
    < 9) or (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int
    < 16)) and not ansible_check_mode
  ansible.builtin.copy:
    src: '{{ datadog_apt_usr_share_keyring }}'
    dest: '{{ datadog_apt_trusted_d_keyring }}'
    mode: '0644'
    remote_src: true
- name: Ensure Datadog non-https repositories and repositories not using signed-by
    option are deprecated
  with_items:
  - deb http://apt.datadoghq.com/ stable main
  - deb http://apt.datadoghq.com/ stable 6
  - deb http://apt.datadoghq.com/ stable 7
  - deb https://apt.datadoghq.com/ stable main
  - deb https://apt.datadoghq.com/ stable 6
  - deb https://apt.datadoghq.com/ stable 7
  when: not ansible_check_mode
  ansible.builtin.apt_repository:
    repo: '{{ item }}'
    state: absent
    update_cache: true
- name: Ensure Datadog repository is up-to-date
  when: (not ansible_check_mode)
  with_dict:
    5: '{{ datadog_agent5_apt_repo }}'
    6: '{{ datadog_agent6_apt_repo }}'
    7: '{{ datadog_agent7_apt_repo }}'
  ansible.builtin.apt_repository:
    filename: ansible_datadog_{{ item.key }}
    repo: '{{ item.value }}'
    state: '{% if item.key == datadog_agent_major_version|int and datadog_apt_repo
      | length == 0 %}present{% else %}absent{% endif %}'
    update_cache: true
- name: Initialize custom repo file deletion flag to False
  ansible.builtin.set_fact:
    datadog_remove_custom_repo_file: 'False'
- name: Check if custom repository file exists
  register: datadog_custom_repo_file
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/ansible_datadog_custom.list
- name: Fetch custom repository file
  register: datadog_custom_repo_file_contents
  when: datadog_custom_repo_file.stat.exists
  ansible.builtin.slurp:
    src: /etc/apt/sources.list.d/ansible_datadog_custom.list
- name: Flag custom repository file for deletion if different from current repository
    config
  vars:
    datadog_repo_file_contents: '{{ datadog_custom_repo_file_contents[''content'']
      | b64decode | trim }}'
  when: datadog_custom_repo_file.stat.exists
  ansible.builtin.set_fact:
    datadog_remove_custom_repo_file: '{{ datadog_repo_file_contents != datadog_apt_repo
      }}'
- name: (Custom) Remove Datadog custom repository file when not set or updated
  when: (datadog_apt_repo | length == 0) or datadog_remove_custom_repo_file and (not
    ansible_check_mode)
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/ansible_datadog_custom.list
    state: absent
- name: (Custom) Ensure Datadog repository is up-to-date
  when: (datadog_apt_repo | length > 0) and (not ansible_check_mode)
  ansible.builtin.apt_repository:
    filename: ansible_datadog_custom
    repo: '{{ datadog_apt_repo }}'
    state: present
    update_cache: true
- when: datadog_agent_debian_version is defined
  ansible.builtin.include_tasks: pkg-debian/install-pinned.yml
- when: datadog_agent_debian_version is not defined
  ansible.builtin.include_tasks: pkg-debian/install-latest.yml
- name: Install latest datadog-signing-keys package
  register: datadog_signing_keys_install
  when: not ansible_check_mode
  ansible.builtin.apt:
    name: datadog-signing-keys
    state: latest
